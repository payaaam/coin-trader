// Code generated by MockGen. DO NOT EDIT.
// Source: ./slack/slack.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	decimal "github.com/shopspring/decimal"
	reflect "reflect"
)

// MockSlackLoggerInterface is a mock of SlackLoggerInterface interface
type MockSlackLoggerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSlackLoggerInterfaceMockRecorder
}

// MockSlackLoggerInterfaceMockRecorder is the mock recorder for MockSlackLoggerInterface
type MockSlackLoggerInterfaceMockRecorder struct {
	mock *MockSlackLoggerInterface
}

// NewMockSlackLoggerInterface creates a new mock instance
func NewMockSlackLoggerInterface(ctrl *gomock.Controller) *MockSlackLoggerInterface {
	mock := &MockSlackLoggerInterface{ctrl: ctrl}
	mock.recorder = &MockSlackLoggerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSlackLoggerInterface) EXPECT() *MockSlackLoggerInterfaceMockRecorder {
	return m.recorder
}

// Init mocks base method
func (m *MockSlackLoggerInterface) Init(channelName string) {
	m.ctrl.Call(m, "Init", channelName)
}

// Init indicates an expected call of Init
func (mr *MockSlackLoggerInterfaceMockRecorder) Init(channelName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockSlackLoggerInterface)(nil).Init), channelName)
}

// PostTrade mocks base method
func (m *MockSlackLoggerInterface) PostTrade(action string, limit, quantity decimal.Decimal, base, market string) {
	m.ctrl.Call(m, "PostTrade", action, limit, quantity, base, market)
}

// PostTrade indicates an expected call of PostTrade
func (mr *MockSlackLoggerInterfaceMockRecorder) PostTrade(action, limit, quantity, base, market interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostTrade", reflect.TypeOf((*MockSlackLoggerInterface)(nil).PostTrade), action, limit, quantity, base, market)
}
