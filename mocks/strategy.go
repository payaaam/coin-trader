// Code generated by MockGen. DO NOT EDIT.
// Source: ./strategies/strategy.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	charts "github.com/payaaam/coin-trader/charts"
	reflect "reflect"
)

// MockStrategy is a mock of Strategy interface
type MockStrategy struct {
	ctrl     *gomock.Controller
	recorder *MockStrategyMockRecorder
}

// MockStrategyMockRecorder is the mock recorder for MockStrategy
type MockStrategyMockRecorder struct {
	mock *MockStrategy
}

// NewMockStrategy creates a new mock instance
func NewMockStrategy(ctrl *gomock.Controller) *MockStrategy {
	mock := &MockStrategy{ctrl: ctrl}
	mock.recorder = &MockStrategyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStrategy) EXPECT() *MockStrategyMockRecorder {
	return m.recorder
}

// ShouldBuy mocks base method
func (m *MockStrategy) ShouldBuy(chart *charts.CloudChart) bool {
	ret := m.ctrl.Call(m, "ShouldBuy", chart)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ShouldBuy indicates an expected call of ShouldBuy
func (mr *MockStrategyMockRecorder) ShouldBuy(chart interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldBuy", reflect.TypeOf((*MockStrategy)(nil).ShouldBuy), chart)
}

// ShouldSell mocks base method
func (m *MockStrategy) ShouldSell(chart *charts.CloudChart) bool {
	ret := m.ctrl.Call(m, "ShouldSell", chart)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ShouldSell indicates an expected call of ShouldSell
func (mr *MockStrategyMockRecorder) ShouldSell(chart interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldSell", reflect.TypeOf((*MockStrategy)(nil).ShouldSell), chart)
}
