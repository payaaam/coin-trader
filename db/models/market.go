// This file is generated by SQLBoiler (https://github.com/volatiletech/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"gopkg.in/volatiletech/null.v6"
)

// Market is an object representing the database table.
type Market struct {
	ID                 int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	ExchangeName       string      `boil:"exchange_name" json:"exchange_name" toml:"exchange_name" yaml:"exchange_name"`
	BaseCurrency       string      `boil:"base_currency" json:"base_currency" toml:"base_currency" yaml:"base_currency"`
	BaseCurrencyName   null.String `boil:"base_currency_name" json:"base_currency_name,omitempty" toml:"base_currency_name" yaml:"base_currency_name,omitempty"`
	MarketCurrency     string      `boil:"market_currency" json:"market_currency" toml:"market_currency" yaml:"market_currency"`
	MarketCurrencyName null.String `boil:"market_currency_name" json:"market_currency_name,omitempty" toml:"market_currency_name" yaml:"market_currency_name,omitempty"`
	MarketKey          string      `boil:"market_key" json:"market_key" toml:"market_key" yaml:"market_key"`

	R *marketR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L marketL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MarketColumns = struct {
	ID                 string
	ExchangeName       string
	BaseCurrency       string
	BaseCurrencyName   string
	MarketCurrency     string
	MarketCurrencyName string
	MarketKey          string
}{
	ID:                 "id",
	ExchangeName:       "exchange_name",
	BaseCurrency:       "base_currency",
	BaseCurrencyName:   "base_currency_name",
	MarketCurrency:     "market_currency",
	MarketCurrencyName: "market_currency_name",
	MarketKey:          "market_key",
}

// marketR is where relationships are stored.
type marketR struct {
	Charts ChartSlice
	Orders OrderSlice
}

// marketL is where Load methods for each relationship are stored.
type marketL struct{}

var (
	marketColumns               = []string{"id", "exchange_name", "base_currency", "base_currency_name", "market_currency", "market_currency_name", "market_key"}
	marketColumnsWithoutDefault = []string{"exchange_name", "base_currency", "base_currency_name", "market_currency", "market_currency_name", "market_key"}
	marketColumnsWithDefault    = []string{"id"}
	marketPrimaryKeyColumns     = []string{"id"}
)

type (
	// MarketSlice is an alias for a slice of pointers to Market.
	// This should generally be used opposed to []Market.
	MarketSlice []*Market
	// MarketHook is the signature for custom Market hook methods
	MarketHook func(boil.Executor, *Market) error

	marketQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	marketType                 = reflect.TypeOf(&Market{})
	marketMapping              = queries.MakeStructMapping(marketType)
	marketPrimaryKeyMapping, _ = queries.BindMapping(marketType, marketMapping, marketPrimaryKeyColumns)
	marketInsertCacheMut       sync.RWMutex
	marketInsertCache          = make(map[string]insertCache)
	marketUpdateCacheMut       sync.RWMutex
	marketUpdateCache          = make(map[string]updateCache)
	marketUpsertCacheMut       sync.RWMutex
	marketUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var marketBeforeInsertHooks []MarketHook
var marketBeforeUpdateHooks []MarketHook
var marketBeforeDeleteHooks []MarketHook
var marketBeforeUpsertHooks []MarketHook

var marketAfterInsertHooks []MarketHook
var marketAfterSelectHooks []MarketHook
var marketAfterUpdateHooks []MarketHook
var marketAfterDeleteHooks []MarketHook
var marketAfterUpsertHooks []MarketHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Market) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range marketBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Market) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range marketBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Market) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range marketBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Market) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range marketBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Market) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range marketAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Market) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range marketAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Market) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range marketAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Market) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range marketAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Market) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range marketAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMarketHook registers your hook function for all future operations.
func AddMarketHook(hookPoint boil.HookPoint, marketHook MarketHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		marketBeforeInsertHooks = append(marketBeforeInsertHooks, marketHook)
	case boil.BeforeUpdateHook:
		marketBeforeUpdateHooks = append(marketBeforeUpdateHooks, marketHook)
	case boil.BeforeDeleteHook:
		marketBeforeDeleteHooks = append(marketBeforeDeleteHooks, marketHook)
	case boil.BeforeUpsertHook:
		marketBeforeUpsertHooks = append(marketBeforeUpsertHooks, marketHook)
	case boil.AfterInsertHook:
		marketAfterInsertHooks = append(marketAfterInsertHooks, marketHook)
	case boil.AfterSelectHook:
		marketAfterSelectHooks = append(marketAfterSelectHooks, marketHook)
	case boil.AfterUpdateHook:
		marketAfterUpdateHooks = append(marketAfterUpdateHooks, marketHook)
	case boil.AfterDeleteHook:
		marketAfterDeleteHooks = append(marketAfterDeleteHooks, marketHook)
	case boil.AfterUpsertHook:
		marketAfterUpsertHooks = append(marketAfterUpsertHooks, marketHook)
	}
}

// OneP returns a single market record from the query, and panics on error.
func (q marketQuery) OneP() *Market {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single market record from the query.
func (q marketQuery) One() (*Market, error) {
	o := &Market{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for market")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Market records from the query, and panics on error.
func (q marketQuery) AllP() MarketSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Market records from the query.
func (q marketQuery) All() (MarketSlice, error) {
	var o []*Market

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Market slice")
	}

	if len(marketAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Market records in the query, and panics on error.
func (q marketQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Market records in the query.
func (q marketQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count market rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q marketQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q marketQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if market exists")
	}

	return count > 0, nil
}

// ChartsG retrieves all the chart's chart.
func (o *Market) ChartsG(mods ...qm.QueryMod) chartQuery {
	return o.Charts(boil.GetDB(), mods...)
}

// Charts retrieves all the chart's chart with an executor.
func (o *Market) Charts(exec boil.Executor, mods ...qm.QueryMod) chartQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"chart\".\"market_id\"=?", o.ID),
	)

	query := Charts(exec, queryMods...)
	queries.SetFrom(query.Query, "\"chart\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"chart\".*"})
	}

	return query
}

// OrdersG retrieves all the order's order.
func (o *Market) OrdersG(mods ...qm.QueryMod) orderQuery {
	return o.Orders(boil.GetDB(), mods...)
}

// Orders retrieves all the order's order with an executor.
func (o *Market) Orders(exec boil.Executor, mods ...qm.QueryMod) orderQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"order\".\"market_id\"=?", o.ID),
	)

	query := Orders(exec, queryMods...)
	queries.SetFrom(query.Query, "\"order\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"order\".*"})
	}

	return query
}

// LoadCharts allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (marketL) LoadCharts(e boil.Executor, singular bool, maybeMarket interface{}) error {
	var slice []*Market
	var object *Market

	count := 1
	if singular {
		object = maybeMarket.(*Market)
	} else {
		slice = *maybeMarket.(*[]*Market)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &marketR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &marketR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"chart\" where \"market_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load chart")
	}
	defer results.Close()

	var resultSlice []*Chart
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice chart")
	}

	if len(chartAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Charts = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.MarketID {
				local.R.Charts = append(local.R.Charts, foreign)
				break
			}
		}
	}

	return nil
}

// LoadOrders allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (marketL) LoadOrders(e boil.Executor, singular bool, maybeMarket interface{}) error {
	var slice []*Market
	var object *Market

	count := 1
	if singular {
		object = maybeMarket.(*Market)
	} else {
		slice = *maybeMarket.(*[]*Market)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &marketR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &marketR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"order\" where \"market_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load order")
	}
	defer results.Close()

	var resultSlice []*Order
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice order")
	}

	if len(orderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Orders = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.MarketID {
				local.R.Orders = append(local.R.Orders, foreign)
				break
			}
		}
	}

	return nil
}

// AddChartsG adds the given related objects to the existing relationships
// of the market, optionally inserting them as new records.
// Appends related to o.R.Charts.
// Sets related.R.Market appropriately.
// Uses the global database handle.
func (o *Market) AddChartsG(insert bool, related ...*Chart) error {
	return o.AddCharts(boil.GetDB(), insert, related...)
}

// AddChartsP adds the given related objects to the existing relationships
// of the market, optionally inserting them as new records.
// Appends related to o.R.Charts.
// Sets related.R.Market appropriately.
// Panics on error.
func (o *Market) AddChartsP(exec boil.Executor, insert bool, related ...*Chart) {
	if err := o.AddCharts(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddChartsGP adds the given related objects to the existing relationships
// of the market, optionally inserting them as new records.
// Appends related to o.R.Charts.
// Sets related.R.Market appropriately.
// Uses the global database handle and panics on error.
func (o *Market) AddChartsGP(insert bool, related ...*Chart) {
	if err := o.AddCharts(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddCharts adds the given related objects to the existing relationships
// of the market, optionally inserting them as new records.
// Appends related to o.R.Charts.
// Sets related.R.Market appropriately.
func (o *Market) AddCharts(exec boil.Executor, insert bool, related ...*Chart) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.MarketID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"chart\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"market_id"}),
				strmangle.WhereClause("\"", "\"", 2, chartPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.MarketID = o.ID
		}
	}

	if o.R == nil {
		o.R = &marketR{
			Charts: related,
		}
	} else {
		o.R.Charts = append(o.R.Charts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &chartR{
				Market: o,
			}
		} else {
			rel.R.Market = o
		}
	}
	return nil
}

// AddOrdersG adds the given related objects to the existing relationships
// of the market, optionally inserting them as new records.
// Appends related to o.R.Orders.
// Sets related.R.Market appropriately.
// Uses the global database handle.
func (o *Market) AddOrdersG(insert bool, related ...*Order) error {
	return o.AddOrders(boil.GetDB(), insert, related...)
}

// AddOrdersP adds the given related objects to the existing relationships
// of the market, optionally inserting them as new records.
// Appends related to o.R.Orders.
// Sets related.R.Market appropriately.
// Panics on error.
func (o *Market) AddOrdersP(exec boil.Executor, insert bool, related ...*Order) {
	if err := o.AddOrders(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddOrdersGP adds the given related objects to the existing relationships
// of the market, optionally inserting them as new records.
// Appends related to o.R.Orders.
// Sets related.R.Market appropriately.
// Uses the global database handle and panics on error.
func (o *Market) AddOrdersGP(insert bool, related ...*Order) {
	if err := o.AddOrders(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddOrders adds the given related objects to the existing relationships
// of the market, optionally inserting them as new records.
// Appends related to o.R.Orders.
// Sets related.R.Market appropriately.
func (o *Market) AddOrders(exec boil.Executor, insert bool, related ...*Order) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.MarketID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"order\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"market_id"}),
				strmangle.WhereClause("\"", "\"", 2, orderPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.MarketID = o.ID
		}
	}

	if o.R == nil {
		o.R = &marketR{
			Orders: related,
		}
	} else {
		o.R.Orders = append(o.R.Orders, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &orderR{
				Market: o,
			}
		} else {
			rel.R.Market = o
		}
	}
	return nil
}

// MarketsG retrieves all records.
func MarketsG(mods ...qm.QueryMod) marketQuery {
	return Markets(boil.GetDB(), mods...)
}

// Markets retrieves all the records using an executor.
func Markets(exec boil.Executor, mods ...qm.QueryMod) marketQuery {
	mods = append(mods, qm.From("\"market\""))
	return marketQuery{NewQuery(exec, mods...)}
}

// FindMarketG retrieves a single record by ID.
func FindMarketG(id int, selectCols ...string) (*Market, error) {
	return FindMarket(boil.GetDB(), id, selectCols...)
}

// FindMarketGP retrieves a single record by ID, and panics on error.
func FindMarketGP(id int, selectCols ...string) *Market {
	retobj, err := FindMarket(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindMarket retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMarket(exec boil.Executor, id int, selectCols ...string) (*Market, error) {
	marketObj := &Market{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"market\" where \"id\"=$1", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(marketObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from market")
	}

	return marketObj, nil
}

// FindMarketP retrieves a single record by ID with an executor, and panics on error.
func FindMarketP(exec boil.Executor, id int, selectCols ...string) *Market {
	retobj, err := FindMarket(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Market) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Market) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Market) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Market) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no market provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(marketColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	marketInsertCacheMut.RLock()
	cache, cached := marketInsertCache[key]
	marketInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			marketColumns,
			marketColumnsWithDefault,
			marketColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(marketType, marketMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(marketType, marketMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"market\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"market\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into market")
	}

	if !cached {
		marketInsertCacheMut.Lock()
		marketInsertCache[key] = cache
		marketInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Market record. See Update for
// whitelist behavior description.
func (o *Market) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Market record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Market) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Market, and panics on error.
// See Update for whitelist behavior description.
func (o *Market) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Market.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Market) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	marketUpdateCacheMut.RLock()
	cache, cached := marketUpdateCache[key]
	marketUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			marketColumns,
			marketPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update market, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"market\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, marketPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(marketType, marketMapping, append(wl, marketPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update market row")
	}

	if !cached {
		marketUpdateCacheMut.Lock()
		marketUpdateCache[key] = cache
		marketUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q marketQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q marketQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for market")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o MarketSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o MarketSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o MarketSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MarketSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), marketPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"market\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, marketPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in market slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Market) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Market) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Market) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Market) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no market provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(marketColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	marketUpsertCacheMut.RLock()
	cache, cached := marketUpsertCache[key]
	marketUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			marketColumns,
			marketColumnsWithDefault,
			marketColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			marketColumns,
			marketPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert market, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(marketPrimaryKeyColumns))
			copy(conflict, marketPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"market\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(marketType, marketMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(marketType, marketMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert market")
	}

	if !cached {
		marketUpsertCacheMut.Lock()
		marketUpsertCache[key] = cache
		marketUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Market record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Market) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Market record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Market) DeleteG() error {
	if o == nil {
		return errors.New("models: no Market provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Market record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Market) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Market record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Market) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Market provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), marketPrimaryKeyMapping)
	sql := "DELETE FROM \"market\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from market")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q marketQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q marketQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no marketQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from market")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o MarketSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o MarketSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no Market slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o MarketSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MarketSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Market slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(marketBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), marketPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"market\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, marketPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from market slice")
	}

	if len(marketAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Market) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Market) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Market) ReloadG() error {
	if o == nil {
		return errors.New("models: no Market provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Market) Reload(exec boil.Executor) error {
	ret, err := FindMarket(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *MarketSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *MarketSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MarketSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty MarketSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MarketSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	markets := MarketSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), marketPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"market\".* FROM \"market\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, marketPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&markets)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MarketSlice")
	}

	*o = markets

	return nil
}

// MarketExists checks if the Market row exists.
func MarketExists(exec boil.Executor, id int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"market\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if market exists")
	}

	return exists, nil
}

// MarketExistsG checks if the Market row exists.
func MarketExistsG(id int) (bool, error) {
	return MarketExists(boil.GetDB(), id)
}

// MarketExistsGP checks if the Market row exists. Panics on error.
func MarketExistsGP(id int) bool {
	e, err := MarketExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// MarketExistsP checks if the Market row exists. Panics on error.
func MarketExistsP(exec boil.Executor, id int) bool {
	e, err := MarketExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
