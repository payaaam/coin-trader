// This file is generated by SQLBoiler (https://github.com/volatiletech/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testOrders(t *testing.T) {
	t.Parallel()

	query := Orders(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testOrdersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	order := &Order{}
	if err = randomize.Struct(seed, order, orderDBTypes, true, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = order.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = order.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Orders(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOrdersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	order := &Order{}
	if err = randomize.Struct(seed, order, orderDBTypes, true, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = order.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Orders(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Orders(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOrdersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	order := &Order{}
	if err = randomize.Struct(seed, order, orderDBTypes, true, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = order.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := OrderSlice{order}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Orders(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testOrdersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	order := &Order{}
	if err = randomize.Struct(seed, order, orderDBTypes, true, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = order.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := OrderExists(tx, order.ID)
	if err != nil {
		t.Errorf("Unable to check if Order exists: %s", err)
	}
	if !e {
		t.Errorf("Expected OrderExistsG to return true, but got false.")
	}
}
func testOrdersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	order := &Order{}
	if err = randomize.Struct(seed, order, orderDBTypes, true, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = order.Insert(tx); err != nil {
		t.Error(err)
	}

	orderFound, err := FindOrder(tx, order.ID)
	if err != nil {
		t.Error(err)
	}

	if orderFound == nil {
		t.Error("want a record, got nil")
	}
}
func testOrdersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	order := &Order{}
	if err = randomize.Struct(seed, order, orderDBTypes, true, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = order.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Orders(tx).Bind(order); err != nil {
		t.Error(err)
	}
}

func testOrdersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	order := &Order{}
	if err = randomize.Struct(seed, order, orderDBTypes, true, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = order.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Orders(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testOrdersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	orderOne := &Order{}
	orderTwo := &Order{}
	if err = randomize.Struct(seed, orderOne, orderDBTypes, false, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}
	if err = randomize.Struct(seed, orderTwo, orderDBTypes, false, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = orderOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = orderTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Orders(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testOrdersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	orderOne := &Order{}
	orderTwo := &Order{}
	if err = randomize.Struct(seed, orderOne, orderDBTypes, false, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}
	if err = randomize.Struct(seed, orderTwo, orderDBTypes, false, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = orderOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = orderTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Orders(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func orderBeforeInsertHook(e boil.Executor, o *Order) error {
	*o = Order{}
	return nil
}

func orderAfterInsertHook(e boil.Executor, o *Order) error {
	*o = Order{}
	return nil
}

func orderAfterSelectHook(e boil.Executor, o *Order) error {
	*o = Order{}
	return nil
}

func orderBeforeUpdateHook(e boil.Executor, o *Order) error {
	*o = Order{}
	return nil
}

func orderAfterUpdateHook(e boil.Executor, o *Order) error {
	*o = Order{}
	return nil
}

func orderBeforeDeleteHook(e boil.Executor, o *Order) error {
	*o = Order{}
	return nil
}

func orderAfterDeleteHook(e boil.Executor, o *Order) error {
	*o = Order{}
	return nil
}

func orderBeforeUpsertHook(e boil.Executor, o *Order) error {
	*o = Order{}
	return nil
}

func orderAfterUpsertHook(e boil.Executor, o *Order) error {
	*o = Order{}
	return nil
}

func testOrdersHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Order{}
	o := &Order{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, orderDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Order object: %s", err)
	}

	AddOrderHook(boil.BeforeInsertHook, orderBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	orderBeforeInsertHooks = []OrderHook{}

	AddOrderHook(boil.AfterInsertHook, orderAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	orderAfterInsertHooks = []OrderHook{}

	AddOrderHook(boil.AfterSelectHook, orderAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	orderAfterSelectHooks = []OrderHook{}

	AddOrderHook(boil.BeforeUpdateHook, orderBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	orderBeforeUpdateHooks = []OrderHook{}

	AddOrderHook(boil.AfterUpdateHook, orderAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	orderAfterUpdateHooks = []OrderHook{}

	AddOrderHook(boil.BeforeDeleteHook, orderBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	orderBeforeDeleteHooks = []OrderHook{}

	AddOrderHook(boil.AfterDeleteHook, orderAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	orderAfterDeleteHooks = []OrderHook{}

	AddOrderHook(boil.BeforeUpsertHook, orderBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	orderBeforeUpsertHooks = []OrderHook{}

	AddOrderHook(boil.AfterUpsertHook, orderAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	orderAfterUpsertHooks = []OrderHook{}
}
func testOrdersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	order := &Order{}
	if err = randomize.Struct(seed, order, orderDBTypes, true, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = order.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Orders(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOrdersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	order := &Order{}
	if err = randomize.Struct(seed, order, orderDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = order.Insert(tx, orderColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Orders(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOrderToOneMarketUsingMarket(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Order
	var foreign Market

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, orderDBTypes, false, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, marketDBTypes, false, marketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Market struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.MarketID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Market(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := OrderSlice{&local}
	if err = local.L.LoadMarket(tx, false, (*[]*Order)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Market == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Market = nil
	if err = local.L.LoadMarket(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Market == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testOrderToOneSetOpMarketUsingMarket(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Order
	var b, c Market

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, marketDBTypes, false, strmangle.SetComplement(marketPrimaryKeyColumns, marketColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, marketDBTypes, false, strmangle.SetComplement(marketPrimaryKeyColumns, marketColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Market{&b, &c} {
		err = a.SetMarket(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Market != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Orders[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.MarketID != x.ID {
			t.Error("foreign key was wrong value", a.MarketID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.MarketID))
		reflect.Indirect(reflect.ValueOf(&a.MarketID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.MarketID != x.ID {
			t.Error("foreign key was wrong value", a.MarketID, x.ID)
		}
	}
}
func testOrdersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	order := &Order{}
	if err = randomize.Struct(seed, order, orderDBTypes, true, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = order.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = order.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testOrdersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	order := &Order{}
	if err = randomize.Struct(seed, order, orderDBTypes, true, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = order.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := OrderSlice{order}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testOrdersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	order := &Order{}
	if err = randomize.Struct(seed, order, orderDBTypes, true, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = order.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Orders(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	orderDBTypes = map[string]string{`CloseTime`: `bigint`, `ExchangeOrderID`: `text`, `ID`: `integer`, `Limit`: `text`, `MarketID`: `integer`, `OpenTime`: `bigint`, `Quantity`: `text`, `QuantityFilled`: `text`, `SellPrice`: `text`, `Status`: `text`, `Type`: `text`}
	_            = bytes.MinRead
)

func testOrdersUpdate(t *testing.T) {
	t.Parallel()

	if len(orderColumns) == len(orderPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	order := &Order{}
	if err = randomize.Struct(seed, order, orderDBTypes, true, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = order.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Orders(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, order, orderDBTypes, true, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	if err = order.Update(tx); err != nil {
		t.Error(err)
	}
}

func testOrdersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(orderColumns) == len(orderPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	order := &Order{}
	if err = randomize.Struct(seed, order, orderDBTypes, true, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = order.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Orders(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, order, orderDBTypes, true, orderPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(orderColumns, orderPrimaryKeyColumns) {
		fields = orderColumns
	} else {
		fields = strmangle.SetComplement(
			orderColumns,
			orderPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(order))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := OrderSlice{order}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testOrdersUpsert(t *testing.T) {
	t.Parallel()

	if len(orderColumns) == len(orderPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	order := Order{}
	if err = randomize.Struct(seed, &order, orderDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = order.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Order: %s", err)
	}

	count, err := Orders(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &order, orderDBTypes, false, orderPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	if err = order.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Order: %s", err)
	}

	count, err = Orders(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
