// This file is generated by SQLBoiler (https://github.com/volatiletech/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testMarkets(t *testing.T) {
	t.Parallel()

	query := Markets(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testMarketsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	market := &Market{}
	if err = randomize.Struct(seed, market, marketDBTypes, true, marketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Market struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = market.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = market.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Markets(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMarketsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	market := &Market{}
	if err = randomize.Struct(seed, market, marketDBTypes, true, marketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Market struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = market.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Markets(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Markets(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMarketsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	market := &Market{}
	if err = randomize.Struct(seed, market, marketDBTypes, true, marketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Market struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = market.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := MarketSlice{market}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Markets(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testMarketsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	market := &Market{}
	if err = randomize.Struct(seed, market, marketDBTypes, true, marketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Market struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = market.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := MarketExists(tx, market.ID)
	if err != nil {
		t.Errorf("Unable to check if Market exists: %s", err)
	}
	if !e {
		t.Errorf("Expected MarketExistsG to return true, but got false.")
	}
}
func testMarketsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	market := &Market{}
	if err = randomize.Struct(seed, market, marketDBTypes, true, marketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Market struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = market.Insert(tx); err != nil {
		t.Error(err)
	}

	marketFound, err := FindMarket(tx, market.ID)
	if err != nil {
		t.Error(err)
	}

	if marketFound == nil {
		t.Error("want a record, got nil")
	}
}
func testMarketsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	market := &Market{}
	if err = randomize.Struct(seed, market, marketDBTypes, true, marketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Market struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = market.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Markets(tx).Bind(market); err != nil {
		t.Error(err)
	}
}

func testMarketsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	market := &Market{}
	if err = randomize.Struct(seed, market, marketDBTypes, true, marketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Market struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = market.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Markets(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testMarketsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	marketOne := &Market{}
	marketTwo := &Market{}
	if err = randomize.Struct(seed, marketOne, marketDBTypes, false, marketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Market struct: %s", err)
	}
	if err = randomize.Struct(seed, marketTwo, marketDBTypes, false, marketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Market struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = marketOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = marketTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Markets(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testMarketsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	marketOne := &Market{}
	marketTwo := &Market{}
	if err = randomize.Struct(seed, marketOne, marketDBTypes, false, marketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Market struct: %s", err)
	}
	if err = randomize.Struct(seed, marketTwo, marketDBTypes, false, marketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Market struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = marketOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = marketTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Markets(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func marketBeforeInsertHook(e boil.Executor, o *Market) error {
	*o = Market{}
	return nil
}

func marketAfterInsertHook(e boil.Executor, o *Market) error {
	*o = Market{}
	return nil
}

func marketAfterSelectHook(e boil.Executor, o *Market) error {
	*o = Market{}
	return nil
}

func marketBeforeUpdateHook(e boil.Executor, o *Market) error {
	*o = Market{}
	return nil
}

func marketAfterUpdateHook(e boil.Executor, o *Market) error {
	*o = Market{}
	return nil
}

func marketBeforeDeleteHook(e boil.Executor, o *Market) error {
	*o = Market{}
	return nil
}

func marketAfterDeleteHook(e boil.Executor, o *Market) error {
	*o = Market{}
	return nil
}

func marketBeforeUpsertHook(e boil.Executor, o *Market) error {
	*o = Market{}
	return nil
}

func marketAfterUpsertHook(e boil.Executor, o *Market) error {
	*o = Market{}
	return nil
}

func testMarketsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Market{}
	o := &Market{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, marketDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Market object: %s", err)
	}

	AddMarketHook(boil.BeforeInsertHook, marketBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	marketBeforeInsertHooks = []MarketHook{}

	AddMarketHook(boil.AfterInsertHook, marketAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	marketAfterInsertHooks = []MarketHook{}

	AddMarketHook(boil.AfterSelectHook, marketAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	marketAfterSelectHooks = []MarketHook{}

	AddMarketHook(boil.BeforeUpdateHook, marketBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	marketBeforeUpdateHooks = []MarketHook{}

	AddMarketHook(boil.AfterUpdateHook, marketAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	marketAfterUpdateHooks = []MarketHook{}

	AddMarketHook(boil.BeforeDeleteHook, marketBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	marketBeforeDeleteHooks = []MarketHook{}

	AddMarketHook(boil.AfterDeleteHook, marketAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	marketAfterDeleteHooks = []MarketHook{}

	AddMarketHook(boil.BeforeUpsertHook, marketBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	marketBeforeUpsertHooks = []MarketHook{}

	AddMarketHook(boil.AfterUpsertHook, marketAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	marketAfterUpsertHooks = []MarketHook{}
}
func testMarketsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	market := &Market{}
	if err = randomize.Struct(seed, market, marketDBTypes, true, marketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Market struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = market.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Markets(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMarketsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	market := &Market{}
	if err = randomize.Struct(seed, market, marketDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Market struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = market.Insert(tx, marketColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Markets(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMarketToManyCharts(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Market
	var b, c Chart

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, marketDBTypes, true, marketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Market struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, chartDBTypes, false, chartColumnsWithDefault...)
	randomize.Struct(seed, &c, chartDBTypes, false, chartColumnsWithDefault...)

	b.MarketID = a.ID
	c.MarketID = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	chart, err := a.Charts(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range chart {
		if v.MarketID == b.MarketID {
			bFound = true
		}
		if v.MarketID == c.MarketID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := MarketSlice{&a}
	if err = a.L.LoadCharts(tx, false, (*[]*Market)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Charts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Charts = nil
	if err = a.L.LoadCharts(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Charts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", chart)
	}
}

func testMarketToManyOrders(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Market
	var b, c Order

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, marketDBTypes, true, marketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Market struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, orderDBTypes, false, orderColumnsWithDefault...)
	randomize.Struct(seed, &c, orderDBTypes, false, orderColumnsWithDefault...)

	b.MarketID = a.ID
	c.MarketID = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	order, err := a.Orders(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range order {
		if v.MarketID == b.MarketID {
			bFound = true
		}
		if v.MarketID == c.MarketID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := MarketSlice{&a}
	if err = a.L.LoadOrders(tx, false, (*[]*Market)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Orders); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Orders = nil
	if err = a.L.LoadOrders(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Orders); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", order)
	}
}

func testMarketToManyAddOpCharts(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Market
	var b, c, d, e Chart

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, marketDBTypes, false, strmangle.SetComplement(marketPrimaryKeyColumns, marketColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Chart{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, chartDBTypes, false, strmangle.SetComplement(chartPrimaryKeyColumns, chartColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Chart{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCharts(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.MarketID {
			t.Error("foreign key was wrong value", a.ID, first.MarketID)
		}
		if a.ID != second.MarketID {
			t.Error("foreign key was wrong value", a.ID, second.MarketID)
		}

		if first.R.Market != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Market != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Charts[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Charts[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Charts(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testMarketToManyAddOpOrders(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Market
	var b, c, d, e Order

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, marketDBTypes, false, strmangle.SetComplement(marketPrimaryKeyColumns, marketColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Order{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Order{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddOrders(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.MarketID {
			t.Error("foreign key was wrong value", a.ID, first.MarketID)
		}
		if a.ID != second.MarketID {
			t.Error("foreign key was wrong value", a.ID, second.MarketID)
		}

		if first.R.Market != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Market != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Orders[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Orders[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Orders(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testMarketsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	market := &Market{}
	if err = randomize.Struct(seed, market, marketDBTypes, true, marketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Market struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = market.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = market.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testMarketsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	market := &Market{}
	if err = randomize.Struct(seed, market, marketDBTypes, true, marketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Market struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = market.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := MarketSlice{market}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testMarketsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	market := &Market{}
	if err = randomize.Struct(seed, market, marketDBTypes, true, marketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Market struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = market.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Markets(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	marketDBTypes = map[string]string{`BaseCurrency`: `text`, `BaseCurrencyName`: `text`, `ExchangeName`: `text`, `ID`: `integer`, `MarketCurrency`: `text`, `MarketCurrencyName`: `text`, `MarketKey`: `text`}
	_             = bytes.MinRead
)

func testMarketsUpdate(t *testing.T) {
	t.Parallel()

	if len(marketColumns) == len(marketPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	market := &Market{}
	if err = randomize.Struct(seed, market, marketDBTypes, true, marketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Market struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = market.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Markets(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, market, marketDBTypes, true, marketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Market struct: %s", err)
	}

	if err = market.Update(tx); err != nil {
		t.Error(err)
	}
}

func testMarketsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(marketColumns) == len(marketPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	market := &Market{}
	if err = randomize.Struct(seed, market, marketDBTypes, true, marketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Market struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = market.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Markets(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, market, marketDBTypes, true, marketPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Market struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(marketColumns, marketPrimaryKeyColumns) {
		fields = marketColumns
	} else {
		fields = strmangle.SetComplement(
			marketColumns,
			marketPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(market))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := MarketSlice{market}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testMarketsUpsert(t *testing.T) {
	t.Parallel()

	if len(marketColumns) == len(marketPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	market := Market{}
	if err = randomize.Struct(seed, &market, marketDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Market struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = market.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Market: %s", err)
	}

	count, err := Markets(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &market, marketDBTypes, false, marketPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Market struct: %s", err)
	}

	if err = market.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Market: %s", err)
	}

	count, err = Markets(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
