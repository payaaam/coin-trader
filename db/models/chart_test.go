// This file is generated by SQLBoiler (https://github.com/volatiletech/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testCharts(t *testing.T) {
	t.Parallel()

	query := Charts(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testChartsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	chart := &Chart{}
	if err = randomize.Struct(seed, chart, chartDBTypes, true, chartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chart struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = chart.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = chart.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Charts(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testChartsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	chart := &Chart{}
	if err = randomize.Struct(seed, chart, chartDBTypes, true, chartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chart struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = chart.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Charts(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Charts(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testChartsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	chart := &Chart{}
	if err = randomize.Struct(seed, chart, chartDBTypes, true, chartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chart struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = chart.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := ChartSlice{chart}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Charts(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testChartsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	chart := &Chart{}
	if err = randomize.Struct(seed, chart, chartDBTypes, true, chartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chart struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = chart.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := ChartExists(tx, chart.ID)
	if err != nil {
		t.Errorf("Unable to check if Chart exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ChartExistsG to return true, but got false.")
	}
}
func testChartsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	chart := &Chart{}
	if err = randomize.Struct(seed, chart, chartDBTypes, true, chartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chart struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = chart.Insert(tx); err != nil {
		t.Error(err)
	}

	chartFound, err := FindChart(tx, chart.ID)
	if err != nil {
		t.Error(err)
	}

	if chartFound == nil {
		t.Error("want a record, got nil")
	}
}
func testChartsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	chart := &Chart{}
	if err = randomize.Struct(seed, chart, chartDBTypes, true, chartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chart struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = chart.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Charts(tx).Bind(chart); err != nil {
		t.Error(err)
	}
}

func testChartsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	chart := &Chart{}
	if err = randomize.Struct(seed, chart, chartDBTypes, true, chartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chart struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = chart.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Charts(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testChartsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	chartOne := &Chart{}
	chartTwo := &Chart{}
	if err = randomize.Struct(seed, chartOne, chartDBTypes, false, chartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chart struct: %s", err)
	}
	if err = randomize.Struct(seed, chartTwo, chartDBTypes, false, chartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chart struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = chartOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = chartTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Charts(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testChartsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	chartOne := &Chart{}
	chartTwo := &Chart{}
	if err = randomize.Struct(seed, chartOne, chartDBTypes, false, chartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chart struct: %s", err)
	}
	if err = randomize.Struct(seed, chartTwo, chartDBTypes, false, chartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chart struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = chartOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = chartTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Charts(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func chartBeforeInsertHook(e boil.Executor, o *Chart) error {
	*o = Chart{}
	return nil
}

func chartAfterInsertHook(e boil.Executor, o *Chart) error {
	*o = Chart{}
	return nil
}

func chartAfterSelectHook(e boil.Executor, o *Chart) error {
	*o = Chart{}
	return nil
}

func chartBeforeUpdateHook(e boil.Executor, o *Chart) error {
	*o = Chart{}
	return nil
}

func chartAfterUpdateHook(e boil.Executor, o *Chart) error {
	*o = Chart{}
	return nil
}

func chartBeforeDeleteHook(e boil.Executor, o *Chart) error {
	*o = Chart{}
	return nil
}

func chartAfterDeleteHook(e boil.Executor, o *Chart) error {
	*o = Chart{}
	return nil
}

func chartBeforeUpsertHook(e boil.Executor, o *Chart) error {
	*o = Chart{}
	return nil
}

func chartAfterUpsertHook(e boil.Executor, o *Chart) error {
	*o = Chart{}
	return nil
}

func testChartsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Chart{}
	o := &Chart{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, chartDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Chart object: %s", err)
	}

	AddChartHook(boil.BeforeInsertHook, chartBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	chartBeforeInsertHooks = []ChartHook{}

	AddChartHook(boil.AfterInsertHook, chartAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	chartAfterInsertHooks = []ChartHook{}

	AddChartHook(boil.AfterSelectHook, chartAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	chartAfterSelectHooks = []ChartHook{}

	AddChartHook(boil.BeforeUpdateHook, chartBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	chartBeforeUpdateHooks = []ChartHook{}

	AddChartHook(boil.AfterUpdateHook, chartAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	chartAfterUpdateHooks = []ChartHook{}

	AddChartHook(boil.BeforeDeleteHook, chartBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	chartBeforeDeleteHooks = []ChartHook{}

	AddChartHook(boil.AfterDeleteHook, chartAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	chartAfterDeleteHooks = []ChartHook{}

	AddChartHook(boil.BeforeUpsertHook, chartBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	chartBeforeUpsertHooks = []ChartHook{}

	AddChartHook(boil.AfterUpsertHook, chartAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	chartAfterUpsertHooks = []ChartHook{}
}
func testChartsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	chart := &Chart{}
	if err = randomize.Struct(seed, chart, chartDBTypes, true, chartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chart struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = chart.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Charts(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testChartsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	chart := &Chart{}
	if err = randomize.Struct(seed, chart, chartDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Chart struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = chart.Insert(tx, chartColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Charts(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testChartToManyTicks(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Chart
	var b, c Tick

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, chartDBTypes, true, chartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chart struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, tickDBTypes, false, tickColumnsWithDefault...)
	randomize.Struct(seed, &c, tickDBTypes, false, tickColumnsWithDefault...)

	b.ChartID = a.ID
	c.ChartID = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	tick, err := a.Ticks(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range tick {
		if v.ChartID == b.ChartID {
			bFound = true
		}
		if v.ChartID == c.ChartID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ChartSlice{&a}
	if err = a.L.LoadTicks(tx, false, (*[]*Chart)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Ticks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Ticks = nil
	if err = a.L.LoadTicks(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Ticks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", tick)
	}
}

func testChartToManyAddOpTicks(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Chart
	var b, c, d, e Tick

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, chartDBTypes, false, strmangle.SetComplement(chartPrimaryKeyColumns, chartColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Tick{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, tickDBTypes, false, strmangle.SetComplement(tickPrimaryKeyColumns, tickColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Tick{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddTicks(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.ChartID {
			t.Error("foreign key was wrong value", a.ID, first.ChartID)
		}
		if a.ID != second.ChartID {
			t.Error("foreign key was wrong value", a.ID, second.ChartID)
		}

		if first.R.Chart != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Chart != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Ticks[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Ticks[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Ticks(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testChartToOneMarketUsingMarket(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Chart
	var foreign Market

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, chartDBTypes, false, chartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chart struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, marketDBTypes, false, marketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Market struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.MarketID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Market(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ChartSlice{&local}
	if err = local.L.LoadMarket(tx, false, (*[]*Chart)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Market == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Market = nil
	if err = local.L.LoadMarket(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Market == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testChartToOneSetOpMarketUsingMarket(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Chart
	var b, c Market

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, chartDBTypes, false, strmangle.SetComplement(chartPrimaryKeyColumns, chartColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, marketDBTypes, false, strmangle.SetComplement(marketPrimaryKeyColumns, marketColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, marketDBTypes, false, strmangle.SetComplement(marketPrimaryKeyColumns, marketColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Market{&b, &c} {
		err = a.SetMarket(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Market != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Charts[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.MarketID != x.ID {
			t.Error("foreign key was wrong value", a.MarketID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.MarketID))
		reflect.Indirect(reflect.ValueOf(&a.MarketID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.MarketID != x.ID {
			t.Error("foreign key was wrong value", a.MarketID, x.ID)
		}
	}
}
func testChartsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	chart := &Chart{}
	if err = randomize.Struct(seed, chart, chartDBTypes, true, chartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chart struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = chart.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = chart.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testChartsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	chart := &Chart{}
	if err = randomize.Struct(seed, chart, chartDBTypes, true, chartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chart struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = chart.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := ChartSlice{chart}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testChartsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	chart := &Chart{}
	if err = randomize.Struct(seed, chart, chartDBTypes, true, chartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chart struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = chart.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Charts(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	chartDBTypes = map[string]string{`ID`: `integer`, `Interval`: `text`, `MarketID`: `integer`}
	_            = bytes.MinRead
)

func testChartsUpdate(t *testing.T) {
	t.Parallel()

	if len(chartColumns) == len(chartPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	chart := &Chart{}
	if err = randomize.Struct(seed, chart, chartDBTypes, true, chartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chart struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = chart.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Charts(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, chart, chartDBTypes, true, chartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chart struct: %s", err)
	}

	if err = chart.Update(tx); err != nil {
		t.Error(err)
	}
}

func testChartsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(chartColumns) == len(chartPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	chart := &Chart{}
	if err = randomize.Struct(seed, chart, chartDBTypes, true, chartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chart struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = chart.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Charts(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, chart, chartDBTypes, true, chartPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Chart struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(chartColumns, chartPrimaryKeyColumns) {
		fields = chartColumns
	} else {
		fields = strmangle.SetComplement(
			chartColumns,
			chartPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(chart))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := ChartSlice{chart}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testChartsUpsert(t *testing.T) {
	t.Parallel()

	if len(chartColumns) == len(chartPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	chart := Chart{}
	if err = randomize.Struct(seed, &chart, chartDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Chart struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = chart.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Chart: %s", err)
	}

	count, err := Charts(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &chart, chartDBTypes, false, chartPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Chart struct: %s", err)
	}

	if err = chart.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Chart: %s", err)
	}

	count, err = Charts(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
