// This file is generated by SQLBoiler (https://github.com/volatiletech/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testTicks(t *testing.T) {
	t.Parallel()

	query := Ticks(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testTicksDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tick := &Tick{}
	if err = randomize.Struct(seed, tick, tickDBTypes, true, tickColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tick struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tick.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = tick.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Ticks(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTicksQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tick := &Tick{}
	if err = randomize.Struct(seed, tick, tickDBTypes, true, tickColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tick struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tick.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Ticks(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Ticks(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTicksSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tick := &Tick{}
	if err = randomize.Struct(seed, tick, tickDBTypes, true, tickColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tick struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tick.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := TickSlice{tick}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Ticks(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testTicksExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tick := &Tick{}
	if err = randomize.Struct(seed, tick, tickDBTypes, true, tickColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tick struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tick.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := TickExists(tx, tick.ID)
	if err != nil {
		t.Errorf("Unable to check if Tick exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TickExistsG to return true, but got false.")
	}
}
func testTicksFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tick := &Tick{}
	if err = randomize.Struct(seed, tick, tickDBTypes, true, tickColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tick struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tick.Insert(tx); err != nil {
		t.Error(err)
	}

	tickFound, err := FindTick(tx, tick.ID)
	if err != nil {
		t.Error(err)
	}

	if tickFound == nil {
		t.Error("want a record, got nil")
	}
}
func testTicksBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tick := &Tick{}
	if err = randomize.Struct(seed, tick, tickDBTypes, true, tickColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tick struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tick.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Ticks(tx).Bind(tick); err != nil {
		t.Error(err)
	}
}

func testTicksOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tick := &Tick{}
	if err = randomize.Struct(seed, tick, tickDBTypes, true, tickColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tick struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tick.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Ticks(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTicksAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tickOne := &Tick{}
	tickTwo := &Tick{}
	if err = randomize.Struct(seed, tickOne, tickDBTypes, false, tickColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tick struct: %s", err)
	}
	if err = randomize.Struct(seed, tickTwo, tickDBTypes, false, tickColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tick struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tickOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = tickTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Ticks(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTicksCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	tickOne := &Tick{}
	tickTwo := &Tick{}
	if err = randomize.Struct(seed, tickOne, tickDBTypes, false, tickColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tick struct: %s", err)
	}
	if err = randomize.Struct(seed, tickTwo, tickDBTypes, false, tickColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tick struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tickOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = tickTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Ticks(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func tickBeforeInsertHook(e boil.Executor, o *Tick) error {
	*o = Tick{}
	return nil
}

func tickAfterInsertHook(e boil.Executor, o *Tick) error {
	*o = Tick{}
	return nil
}

func tickAfterSelectHook(e boil.Executor, o *Tick) error {
	*o = Tick{}
	return nil
}

func tickBeforeUpdateHook(e boil.Executor, o *Tick) error {
	*o = Tick{}
	return nil
}

func tickAfterUpdateHook(e boil.Executor, o *Tick) error {
	*o = Tick{}
	return nil
}

func tickBeforeDeleteHook(e boil.Executor, o *Tick) error {
	*o = Tick{}
	return nil
}

func tickAfterDeleteHook(e boil.Executor, o *Tick) error {
	*o = Tick{}
	return nil
}

func tickBeforeUpsertHook(e boil.Executor, o *Tick) error {
	*o = Tick{}
	return nil
}

func tickAfterUpsertHook(e boil.Executor, o *Tick) error {
	*o = Tick{}
	return nil
}

func testTicksHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Tick{}
	o := &Tick{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, tickDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Tick object: %s", err)
	}

	AddTickHook(boil.BeforeInsertHook, tickBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	tickBeforeInsertHooks = []TickHook{}

	AddTickHook(boil.AfterInsertHook, tickAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	tickAfterInsertHooks = []TickHook{}

	AddTickHook(boil.AfterSelectHook, tickAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	tickAfterSelectHooks = []TickHook{}

	AddTickHook(boil.BeforeUpdateHook, tickBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	tickBeforeUpdateHooks = []TickHook{}

	AddTickHook(boil.AfterUpdateHook, tickAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	tickAfterUpdateHooks = []TickHook{}

	AddTickHook(boil.BeforeDeleteHook, tickBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	tickBeforeDeleteHooks = []TickHook{}

	AddTickHook(boil.AfterDeleteHook, tickAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	tickAfterDeleteHooks = []TickHook{}

	AddTickHook(boil.BeforeUpsertHook, tickBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	tickBeforeUpsertHooks = []TickHook{}

	AddTickHook(boil.AfterUpsertHook, tickAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	tickAfterUpsertHooks = []TickHook{}
}
func testTicksInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tick := &Tick{}
	if err = randomize.Struct(seed, tick, tickDBTypes, true, tickColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tick struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tick.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Ticks(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTicksInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tick := &Tick{}
	if err = randomize.Struct(seed, tick, tickDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Tick struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tick.Insert(tx, tickColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Ticks(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTickToOneChartUsingChart(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Tick
	var foreign Chart

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, tickDBTypes, false, tickColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tick struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, chartDBTypes, false, chartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chart struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.ChartID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Chart(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := TickSlice{&local}
	if err = local.L.LoadChart(tx, false, (*[]*Tick)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Chart == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Chart = nil
	if err = local.L.LoadChart(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Chart == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testTickToOneSetOpChartUsingChart(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Tick
	var b, c Chart

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tickDBTypes, false, strmangle.SetComplement(tickPrimaryKeyColumns, tickColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, chartDBTypes, false, strmangle.SetComplement(chartPrimaryKeyColumns, chartColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, chartDBTypes, false, strmangle.SetComplement(chartPrimaryKeyColumns, chartColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Chart{&b, &c} {
		err = a.SetChart(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Chart != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Ticks[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ChartID != x.ID {
			t.Error("foreign key was wrong value", a.ChartID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ChartID))
		reflect.Indirect(reflect.ValueOf(&a.ChartID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ChartID != x.ID {
			t.Error("foreign key was wrong value", a.ChartID, x.ID)
		}
	}
}
func testTicksReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tick := &Tick{}
	if err = randomize.Struct(seed, tick, tickDBTypes, true, tickColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tick struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tick.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = tick.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testTicksReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tick := &Tick{}
	if err = randomize.Struct(seed, tick, tickDBTypes, true, tickColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tick struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tick.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := TickSlice{tick}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testTicksSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tick := &Tick{}
	if err = randomize.Struct(seed, tick, tickDBTypes, true, tickColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tick struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tick.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Ticks(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	tickDBTypes = map[string]string{`ChartID`: `integer`, `Close`: `text`, `High`: `text`, `ID`: `integer`, `Low`: `text`, `Open`: `text`, `Timestamp`: `bigint`, `Volume`: `text`}
	_           = bytes.MinRead
)

func testTicksUpdate(t *testing.T) {
	t.Parallel()

	if len(tickColumns) == len(tickPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	tick := &Tick{}
	if err = randomize.Struct(seed, tick, tickDBTypes, true, tickColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tick struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tick.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Ticks(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, tick, tickDBTypes, true, tickColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tick struct: %s", err)
	}

	if err = tick.Update(tx); err != nil {
		t.Error(err)
	}
}

func testTicksSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(tickColumns) == len(tickPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	tick := &Tick{}
	if err = randomize.Struct(seed, tick, tickDBTypes, true, tickColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tick struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tick.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Ticks(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, tick, tickDBTypes, true, tickPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Tick struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(tickColumns, tickPrimaryKeyColumns) {
		fields = tickColumns
	} else {
		fields = strmangle.SetComplement(
			tickColumns,
			tickPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(tick))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := TickSlice{tick}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testTicksUpsert(t *testing.T) {
	t.Parallel()

	if len(tickColumns) == len(tickPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	tick := Tick{}
	if err = randomize.Struct(seed, &tick, tickDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Tick struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tick.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Tick: %s", err)
	}

	count, err := Ticks(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &tick, tickDBTypes, false, tickPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Tick struct: %s", err)
	}

	if err = tick.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Tick: %s", err)
	}

	count, err = Ticks(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
