// This file is generated by SQLBoiler (https://github.com/volatiletech/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testGorpMigrations(t *testing.T) {
	t.Parallel()

	query := GorpMigrations(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testGorpMigrationsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	gorpMigration := &GorpMigration{}
	if err = randomize.Struct(seed, gorpMigration, gorpMigrationDBTypes, true, gorpMigrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GorpMigration struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = gorpMigration.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = gorpMigration.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := GorpMigrations(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGorpMigrationsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	gorpMigration := &GorpMigration{}
	if err = randomize.Struct(seed, gorpMigration, gorpMigrationDBTypes, true, gorpMigrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GorpMigration struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = gorpMigration.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = GorpMigrations(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := GorpMigrations(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGorpMigrationsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	gorpMigration := &GorpMigration{}
	if err = randomize.Struct(seed, gorpMigration, gorpMigrationDBTypes, true, gorpMigrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GorpMigration struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = gorpMigration.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := GorpMigrationSlice{gorpMigration}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := GorpMigrations(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testGorpMigrationsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	gorpMigration := &GorpMigration{}
	if err = randomize.Struct(seed, gorpMigration, gorpMigrationDBTypes, true, gorpMigrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GorpMigration struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = gorpMigration.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := GorpMigrationExists(tx, gorpMigration.ID)
	if err != nil {
		t.Errorf("Unable to check if GorpMigration exists: %s", err)
	}
	if !e {
		t.Errorf("Expected GorpMigrationExistsG to return true, but got false.")
	}
}
func testGorpMigrationsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	gorpMigration := &GorpMigration{}
	if err = randomize.Struct(seed, gorpMigration, gorpMigrationDBTypes, true, gorpMigrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GorpMigration struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = gorpMigration.Insert(tx); err != nil {
		t.Error(err)
	}

	gorpMigrationFound, err := FindGorpMigration(tx, gorpMigration.ID)
	if err != nil {
		t.Error(err)
	}

	if gorpMigrationFound == nil {
		t.Error("want a record, got nil")
	}
}
func testGorpMigrationsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	gorpMigration := &GorpMigration{}
	if err = randomize.Struct(seed, gorpMigration, gorpMigrationDBTypes, true, gorpMigrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GorpMigration struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = gorpMigration.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = GorpMigrations(tx).Bind(gorpMigration); err != nil {
		t.Error(err)
	}
}

func testGorpMigrationsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	gorpMigration := &GorpMigration{}
	if err = randomize.Struct(seed, gorpMigration, gorpMigrationDBTypes, true, gorpMigrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GorpMigration struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = gorpMigration.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := GorpMigrations(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testGorpMigrationsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	gorpMigrationOne := &GorpMigration{}
	gorpMigrationTwo := &GorpMigration{}
	if err = randomize.Struct(seed, gorpMigrationOne, gorpMigrationDBTypes, false, gorpMigrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GorpMigration struct: %s", err)
	}
	if err = randomize.Struct(seed, gorpMigrationTwo, gorpMigrationDBTypes, false, gorpMigrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GorpMigration struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = gorpMigrationOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = gorpMigrationTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := GorpMigrations(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testGorpMigrationsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	gorpMigrationOne := &GorpMigration{}
	gorpMigrationTwo := &GorpMigration{}
	if err = randomize.Struct(seed, gorpMigrationOne, gorpMigrationDBTypes, false, gorpMigrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GorpMigration struct: %s", err)
	}
	if err = randomize.Struct(seed, gorpMigrationTwo, gorpMigrationDBTypes, false, gorpMigrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GorpMigration struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = gorpMigrationOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = gorpMigrationTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := GorpMigrations(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func gorpMigrationBeforeInsertHook(e boil.Executor, o *GorpMigration) error {
	*o = GorpMigration{}
	return nil
}

func gorpMigrationAfterInsertHook(e boil.Executor, o *GorpMigration) error {
	*o = GorpMigration{}
	return nil
}

func gorpMigrationAfterSelectHook(e boil.Executor, o *GorpMigration) error {
	*o = GorpMigration{}
	return nil
}

func gorpMigrationBeforeUpdateHook(e boil.Executor, o *GorpMigration) error {
	*o = GorpMigration{}
	return nil
}

func gorpMigrationAfterUpdateHook(e boil.Executor, o *GorpMigration) error {
	*o = GorpMigration{}
	return nil
}

func gorpMigrationBeforeDeleteHook(e boil.Executor, o *GorpMigration) error {
	*o = GorpMigration{}
	return nil
}

func gorpMigrationAfterDeleteHook(e boil.Executor, o *GorpMigration) error {
	*o = GorpMigration{}
	return nil
}

func gorpMigrationBeforeUpsertHook(e boil.Executor, o *GorpMigration) error {
	*o = GorpMigration{}
	return nil
}

func gorpMigrationAfterUpsertHook(e boil.Executor, o *GorpMigration) error {
	*o = GorpMigration{}
	return nil
}

func testGorpMigrationsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &GorpMigration{}
	o := &GorpMigration{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, gorpMigrationDBTypes, false); err != nil {
		t.Errorf("Unable to randomize GorpMigration object: %s", err)
	}

	AddGorpMigrationHook(boil.BeforeInsertHook, gorpMigrationBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	gorpMigrationBeforeInsertHooks = []GorpMigrationHook{}

	AddGorpMigrationHook(boil.AfterInsertHook, gorpMigrationAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	gorpMigrationAfterInsertHooks = []GorpMigrationHook{}

	AddGorpMigrationHook(boil.AfterSelectHook, gorpMigrationAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	gorpMigrationAfterSelectHooks = []GorpMigrationHook{}

	AddGorpMigrationHook(boil.BeforeUpdateHook, gorpMigrationBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	gorpMigrationBeforeUpdateHooks = []GorpMigrationHook{}

	AddGorpMigrationHook(boil.AfterUpdateHook, gorpMigrationAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	gorpMigrationAfterUpdateHooks = []GorpMigrationHook{}

	AddGorpMigrationHook(boil.BeforeDeleteHook, gorpMigrationBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	gorpMigrationBeforeDeleteHooks = []GorpMigrationHook{}

	AddGorpMigrationHook(boil.AfterDeleteHook, gorpMigrationAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	gorpMigrationAfterDeleteHooks = []GorpMigrationHook{}

	AddGorpMigrationHook(boil.BeforeUpsertHook, gorpMigrationBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	gorpMigrationBeforeUpsertHooks = []GorpMigrationHook{}

	AddGorpMigrationHook(boil.AfterUpsertHook, gorpMigrationAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	gorpMigrationAfterUpsertHooks = []GorpMigrationHook{}
}
func testGorpMigrationsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	gorpMigration := &GorpMigration{}
	if err = randomize.Struct(seed, gorpMigration, gorpMigrationDBTypes, true, gorpMigrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GorpMigration struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = gorpMigration.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := GorpMigrations(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGorpMigrationsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	gorpMigration := &GorpMigration{}
	if err = randomize.Struct(seed, gorpMigration, gorpMigrationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize GorpMigration struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = gorpMigration.Insert(tx, gorpMigrationColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := GorpMigrations(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGorpMigrationsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	gorpMigration := &GorpMigration{}
	if err = randomize.Struct(seed, gorpMigration, gorpMigrationDBTypes, true, gorpMigrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GorpMigration struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = gorpMigration.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = gorpMigration.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testGorpMigrationsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	gorpMigration := &GorpMigration{}
	if err = randomize.Struct(seed, gorpMigration, gorpMigrationDBTypes, true, gorpMigrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GorpMigration struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = gorpMigration.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := GorpMigrationSlice{gorpMigration}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testGorpMigrationsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	gorpMigration := &GorpMigration{}
	if err = randomize.Struct(seed, gorpMigration, gorpMigrationDBTypes, true, gorpMigrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GorpMigration struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = gorpMigration.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := GorpMigrations(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	gorpMigrationDBTypes = map[string]string{`AppliedAt`: `timestamp with time zone`, `ID`: `text`}
	_                    = bytes.MinRead
)

func testGorpMigrationsUpdate(t *testing.T) {
	t.Parallel()

	if len(gorpMigrationColumns) == len(gorpMigrationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	gorpMigration := &GorpMigration{}
	if err = randomize.Struct(seed, gorpMigration, gorpMigrationDBTypes, true, gorpMigrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GorpMigration struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = gorpMigration.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := GorpMigrations(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, gorpMigration, gorpMigrationDBTypes, true, gorpMigrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GorpMigration struct: %s", err)
	}

	if err = gorpMigration.Update(tx); err != nil {
		t.Error(err)
	}
}

func testGorpMigrationsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(gorpMigrationColumns) == len(gorpMigrationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	gorpMigration := &GorpMigration{}
	if err = randomize.Struct(seed, gorpMigration, gorpMigrationDBTypes, true, gorpMigrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GorpMigration struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = gorpMigration.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := GorpMigrations(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, gorpMigration, gorpMigrationDBTypes, true, gorpMigrationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GorpMigration struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(gorpMigrationColumns, gorpMigrationPrimaryKeyColumns) {
		fields = gorpMigrationColumns
	} else {
		fields = strmangle.SetComplement(
			gorpMigrationColumns,
			gorpMigrationPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(gorpMigration))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := GorpMigrationSlice{gorpMigration}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testGorpMigrationsUpsert(t *testing.T) {
	t.Parallel()

	if len(gorpMigrationColumns) == len(gorpMigrationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	gorpMigration := GorpMigration{}
	if err = randomize.Struct(seed, &gorpMigration, gorpMigrationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize GorpMigration struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = gorpMigration.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert GorpMigration: %s", err)
	}

	count, err := GorpMigrations(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &gorpMigration, gorpMigrationDBTypes, false, gorpMigrationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GorpMigration struct: %s", err)
	}

	if err = gorpMigration.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert GorpMigration: %s", err)
	}

	count, err = GorpMigrations(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
