// This file is generated by SQLBoiler (https://github.com/volatiletech/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Tick is an object representing the database table.
type Tick struct {
	ID        int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	ChartID   int    `boil:"chart_id" json:"chart_id" toml:"chart_id" yaml:"chart_id"`
	Open      string `boil:"open" json:"open" toml:"open" yaml:"open"`
	Close     string `boil:"close" json:"close" toml:"close" yaml:"close"`
	High      string `boil:"high" json:"high" toml:"high" yaml:"high"`
	Low       string `boil:"low" json:"low" toml:"low" yaml:"low"`
	Day       int    `boil:"day" json:"day" toml:"day" yaml:"day"`
	Volume    string `boil:"volume" json:"volume" toml:"volume" yaml:"volume"`
	Timestamp int64  `boil:"timestamp" json:"timestamp" toml:"timestamp" yaml:"timestamp"`

	R *tickR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L tickL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TickColumns = struct {
	ID        string
	ChartID   string
	Open      string
	Close     string
	High      string
	Low       string
	Day       string
	Volume    string
	Timestamp string
}{
	ID:        "id",
	ChartID:   "chart_id",
	Open:      "open",
	Close:     "close",
	High:      "high",
	Low:       "low",
	Day:       "day",
	Volume:    "volume",
	Timestamp: "timestamp",
}

// tickR is where relationships are stored.
type tickR struct {
	Chart *Chart
}

// tickL is where Load methods for each relationship are stored.
type tickL struct{}

var (
	tickColumns               = []string{"id", "chart_id", "open", "close", "high", "low", "day", "volume", "timestamp"}
	tickColumnsWithoutDefault = []string{"chart_id", "open", "close", "high", "low", "day", "volume", "timestamp"}
	tickColumnsWithDefault    = []string{"id"}
	tickPrimaryKeyColumns     = []string{"id"}
)

type (
	// TickSlice is an alias for a slice of pointers to Tick.
	// This should generally be used opposed to []Tick.
	TickSlice []*Tick
	// TickHook is the signature for custom Tick hook methods
	TickHook func(boil.Executor, *Tick) error

	tickQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tickType                 = reflect.TypeOf(&Tick{})
	tickMapping              = queries.MakeStructMapping(tickType)
	tickPrimaryKeyMapping, _ = queries.BindMapping(tickType, tickMapping, tickPrimaryKeyColumns)
	tickInsertCacheMut       sync.RWMutex
	tickInsertCache          = make(map[string]insertCache)
	tickUpdateCacheMut       sync.RWMutex
	tickUpdateCache          = make(map[string]updateCache)
	tickUpsertCacheMut       sync.RWMutex
	tickUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var tickBeforeInsertHooks []TickHook
var tickBeforeUpdateHooks []TickHook
var tickBeforeDeleteHooks []TickHook
var tickBeforeUpsertHooks []TickHook

var tickAfterInsertHooks []TickHook
var tickAfterSelectHooks []TickHook
var tickAfterUpdateHooks []TickHook
var tickAfterDeleteHooks []TickHook
var tickAfterUpsertHooks []TickHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Tick) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range tickBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Tick) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range tickBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Tick) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range tickBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Tick) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range tickBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Tick) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range tickAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Tick) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range tickAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Tick) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range tickAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Tick) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range tickAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Tick) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range tickAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTickHook registers your hook function for all future operations.
func AddTickHook(hookPoint boil.HookPoint, tickHook TickHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		tickBeforeInsertHooks = append(tickBeforeInsertHooks, tickHook)
	case boil.BeforeUpdateHook:
		tickBeforeUpdateHooks = append(tickBeforeUpdateHooks, tickHook)
	case boil.BeforeDeleteHook:
		tickBeforeDeleteHooks = append(tickBeforeDeleteHooks, tickHook)
	case boil.BeforeUpsertHook:
		tickBeforeUpsertHooks = append(tickBeforeUpsertHooks, tickHook)
	case boil.AfterInsertHook:
		tickAfterInsertHooks = append(tickAfterInsertHooks, tickHook)
	case boil.AfterSelectHook:
		tickAfterSelectHooks = append(tickAfterSelectHooks, tickHook)
	case boil.AfterUpdateHook:
		tickAfterUpdateHooks = append(tickAfterUpdateHooks, tickHook)
	case boil.AfterDeleteHook:
		tickAfterDeleteHooks = append(tickAfterDeleteHooks, tickHook)
	case boil.AfterUpsertHook:
		tickAfterUpsertHooks = append(tickAfterUpsertHooks, tickHook)
	}
}

// OneP returns a single tick record from the query, and panics on error.
func (q tickQuery) OneP() *Tick {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single tick record from the query.
func (q tickQuery) One() (*Tick, error) {
	o := &Tick{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for tick")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Tick records from the query, and panics on error.
func (q tickQuery) AllP() TickSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Tick records from the query.
func (q tickQuery) All() (TickSlice, error) {
	var o []*Tick

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Tick slice")
	}

	if len(tickAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Tick records in the query, and panics on error.
func (q tickQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Tick records in the query.
func (q tickQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count tick rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q tickQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q tickQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if tick exists")
	}

	return count > 0, nil
}

// ChartG pointed to by the foreign key.
func (o *Tick) ChartG(mods ...qm.QueryMod) chartQuery {
	return o.Chart(boil.GetDB(), mods...)
}

// Chart pointed to by the foreign key.
func (o *Tick) Chart(exec boil.Executor, mods ...qm.QueryMod) chartQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.ChartID),
	}

	queryMods = append(queryMods, mods...)

	query := Charts(exec, queryMods...)
	queries.SetFrom(query.Query, "\"chart\"")

	return query
} // LoadChart allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (tickL) LoadChart(e boil.Executor, singular bool, maybeTick interface{}) error {
	var slice []*Tick
	var object *Tick

	count := 1
	if singular {
		object = maybeTick.(*Tick)
	} else {
		slice = *maybeTick.(*[]*Tick)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &tickR{}
		}
		args[0] = object.ChartID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &tickR{}
			}
			args[i] = obj.ChartID
		}
	}

	query := fmt.Sprintf(
		"select * from \"chart\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Chart")
	}
	defer results.Close()

	var resultSlice []*Chart
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Chart")
	}

	if len(tickAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Chart = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ChartID == foreign.ID {
				local.R.Chart = foreign
				break
			}
		}
	}

	return nil
}

// SetChartG of the tick to the related item.
// Sets o.R.Chart to related.
// Adds o to related.R.Ticks.
// Uses the global database handle.
func (o *Tick) SetChartG(insert bool, related *Chart) error {
	return o.SetChart(boil.GetDB(), insert, related)
}

// SetChartP of the tick to the related item.
// Sets o.R.Chart to related.
// Adds o to related.R.Ticks.
// Panics on error.
func (o *Tick) SetChartP(exec boil.Executor, insert bool, related *Chart) {
	if err := o.SetChart(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetChartGP of the tick to the related item.
// Sets o.R.Chart to related.
// Adds o to related.R.Ticks.
// Uses the global database handle and panics on error.
func (o *Tick) SetChartGP(insert bool, related *Chart) {
	if err := o.SetChart(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetChart of the tick to the related item.
// Sets o.R.Chart to related.
// Adds o to related.R.Ticks.
func (o *Tick) SetChart(exec boil.Executor, insert bool, related *Chart) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"tick\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"chart_id"}),
		strmangle.WhereClause("\"", "\"", 2, tickPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ChartID = related.ID

	if o.R == nil {
		o.R = &tickR{
			Chart: related,
		}
	} else {
		o.R.Chart = related
	}

	if related.R == nil {
		related.R = &chartR{
			Ticks: TickSlice{o},
		}
	} else {
		related.R.Ticks = append(related.R.Ticks, o)
	}

	return nil
}

// TicksG retrieves all records.
func TicksG(mods ...qm.QueryMod) tickQuery {
	return Ticks(boil.GetDB(), mods...)
}

// Ticks retrieves all the records using an executor.
func Ticks(exec boil.Executor, mods ...qm.QueryMod) tickQuery {
	mods = append(mods, qm.From("\"tick\""))
	return tickQuery{NewQuery(exec, mods...)}
}

// FindTickG retrieves a single record by ID.
func FindTickG(id int, selectCols ...string) (*Tick, error) {
	return FindTick(boil.GetDB(), id, selectCols...)
}

// FindTickGP retrieves a single record by ID, and panics on error.
func FindTickGP(id int, selectCols ...string) *Tick {
	retobj, err := FindTick(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindTick retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTick(exec boil.Executor, id int, selectCols ...string) (*Tick, error) {
	tickObj := &Tick{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"tick\" where \"id\"=$1", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(tickObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from tick")
	}

	return tickObj, nil
}

// FindTickP retrieves a single record by ID with an executor, and panics on error.
func FindTickP(exec boil.Executor, id int, selectCols ...string) *Tick {
	retobj, err := FindTick(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Tick) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Tick) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Tick) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Tick) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no tick provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tickColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	tickInsertCacheMut.RLock()
	cache, cached := tickInsertCache[key]
	tickInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			tickColumns,
			tickColumnsWithDefault,
			tickColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(tickType, tickMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(tickType, tickMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"tick\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"tick\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into tick")
	}

	if !cached {
		tickInsertCacheMut.Lock()
		tickInsertCache[key] = cache
		tickInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Tick record. See Update for
// whitelist behavior description.
func (o *Tick) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Tick record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Tick) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Tick, and panics on error.
// See Update for whitelist behavior description.
func (o *Tick) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Tick.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Tick) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	tickUpdateCacheMut.RLock()
	cache, cached := tickUpdateCache[key]
	tickUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			tickColumns,
			tickPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update tick, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"tick\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, tickPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(tickType, tickMapping, append(wl, tickPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update tick row")
	}

	if !cached {
		tickUpdateCacheMut.Lock()
		tickUpdateCache[key] = cache
		tickUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q tickQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q tickQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for tick")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o TickSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o TickSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o TickSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TickSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tickPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"tick\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, tickPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in tick slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Tick) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Tick) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Tick) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Tick) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no tick provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tickColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	tickUpsertCacheMut.RLock()
	cache, cached := tickUpsertCache[key]
	tickUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			tickColumns,
			tickColumnsWithDefault,
			tickColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			tickColumns,
			tickPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert tick, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(tickPrimaryKeyColumns))
			copy(conflict, tickPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"tick\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(tickType, tickMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(tickType, tickMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert tick")
	}

	if !cached {
		tickUpsertCacheMut.Lock()
		tickUpsertCache[key] = cache
		tickUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Tick record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Tick) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Tick record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Tick) DeleteG() error {
	if o == nil {
		return errors.New("models: no Tick provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Tick record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Tick) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Tick record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Tick) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Tick provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), tickPrimaryKeyMapping)
	sql := "DELETE FROM \"tick\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from tick")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q tickQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q tickQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no tickQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from tick")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o TickSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o TickSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no Tick slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o TickSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TickSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Tick slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(tickBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tickPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"tick\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tickPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from tick slice")
	}

	if len(tickAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Tick) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Tick) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Tick) ReloadG() error {
	if o == nil {
		return errors.New("models: no Tick provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Tick) Reload(exec boil.Executor) error {
	ret, err := FindTick(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *TickSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *TickSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TickSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty TickSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TickSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	ticks := TickSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tickPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"tick\".* FROM \"tick\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tickPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&ticks)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TickSlice")
	}

	*o = ticks

	return nil
}

// TickExists checks if the Tick row exists.
func TickExists(exec boil.Executor, id int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"tick\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if tick exists")
	}

	return exists, nil
}

// TickExistsG checks if the Tick row exists.
func TickExistsG(id int) (bool, error) {
	return TickExists(boil.GetDB(), id)
}

// TickExistsGP checks if the Tick row exists. Panics on error.
func TickExistsGP(id int) bool {
	e, err := TickExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// TickExistsP checks if the Tick row exists. Panics on error.
func TickExistsP(exec boil.Executor, id int) bool {
	e, err := TickExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
