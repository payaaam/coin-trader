// Code generated by MockGen. DO NOT EDIT.
// Source: ./exchanges/exchanges.go

// Package exchanges is a generated GoMock package.
package exchanges

import (
	gomock "github.com/golang/mock/gomock"
	charts "github.com/payaaam/coin-trader/charts"
	decimal "github.com/shopspring/decimal"
	reflect "reflect"
)

// MockExchange is a mock of Exchange interface
type MockExchange struct {
	ctrl     *gomock.Controller
	recorder *MockExchangeMockRecorder
}

// MockExchangeMockRecorder is the mock recorder for MockExchange
type MockExchangeMockRecorder struct {
	mock *MockExchange
}

// NewMockExchange creates a new mock instance
func NewMockExchange(ctrl *gomock.Controller) *MockExchange {
	mock := &MockExchange{ctrl: ctrl}
	mock.recorder = &MockExchangeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExchange) EXPECT() *MockExchangeMockRecorder {
	return m.recorder
}

// GetMarketKey mocks base method
func (m *MockExchange) GetMarketKey(base, market string) string {
	ret := m.ctrl.Call(m, "GetMarketKey", base, market)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMarketKey indicates an expected call of GetMarketKey
func (mr *MockExchangeMockRecorder) GetMarketKey(base, market interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMarketKey", reflect.TypeOf((*MockExchange)(nil).GetMarketKey), base, market)
}

// GetBitcoinMarkets mocks base method
func (m *MockExchange) GetBitcoinMarkets() ([]*Market, error) {
	ret := m.ctrl.Call(m, "GetBitcoinMarkets")
	ret0, _ := ret[0].([]*Market)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBitcoinMarkets indicates an expected call of GetBitcoinMarkets
func (mr *MockExchangeMockRecorder) GetBitcoinMarkets() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBitcoinMarkets", reflect.TypeOf((*MockExchange)(nil).GetBitcoinMarkets))
}

// GetCandles mocks base method
func (m *MockExchange) GetCandles(tradingPair, interval string) ([]*charts.Candle, error) {
	ret := m.ctrl.Call(m, "GetCandles", tradingPair, interval)
	ret0, _ := ret[0].([]*charts.Candle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCandles indicates an expected call of GetCandles
func (mr *MockExchangeMockRecorder) GetCandles(tradingPair, interval interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCandles", reflect.TypeOf((*MockExchange)(nil).GetCandles), tradingPair, interval)
}

// GetLatestCandle mocks base method
func (m *MockExchange) GetLatestCandle(tradingPair, chartInterval string) (*charts.Candle, error) {
	ret := m.ctrl.Call(m, "GetLatestCandle", tradingPair, chartInterval)
	ret0, _ := ret[0].(*charts.Candle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestCandle indicates an expected call of GetLatestCandle
func (mr *MockExchangeMockRecorder) GetLatestCandle(tradingPair, chartInterval interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestCandle", reflect.TypeOf((*MockExchange)(nil).GetLatestCandle), tradingPair, chartInterval)
}

// ExecuteLimitBuy mocks base method
func (m *MockExchange) ExecuteLimitBuy(tradingPair string, price, quantity decimal.Decimal) (string, error) {
	ret := m.ctrl.Call(m, "ExecuteLimitBuy", tradingPair, price, quantity)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteLimitBuy indicates an expected call of ExecuteLimitBuy
func (mr *MockExchangeMockRecorder) ExecuteLimitBuy(tradingPair, price, quantity interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteLimitBuy", reflect.TypeOf((*MockExchange)(nil).ExecuteLimitBuy), tradingPair, price, quantity)
}

// ExecuteLimitSell mocks base method
func (m *MockExchange) ExecuteLimitSell(tradingPair string, price, quantity decimal.Decimal) (string, error) {
	ret := m.ctrl.Call(m, "ExecuteLimitSell", tradingPair, price, quantity)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteLimitSell indicates an expected call of ExecuteLimitSell
func (mr *MockExchangeMockRecorder) ExecuteLimitSell(tradingPair, price, quantity interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteLimitSell", reflect.TypeOf((*MockExchange)(nil).ExecuteLimitSell), tradingPair, price, quantity)
}

// GetBalances mocks base method
func (m *MockExchange) GetBalances() ([]*Balance, error) {
	ret := m.ctrl.Call(m, "GetBalances")
	ret0, _ := ret[0].([]*Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalances indicates an expected call of GetBalances
func (mr *MockExchangeMockRecorder) GetBalances() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalances", reflect.TypeOf((*MockExchange)(nil).GetBalances))
}
